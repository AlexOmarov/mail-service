# Contour section stores values, that almost always vary from environment to environment
contour:
  instance: unknown
  fluentbit:
    host: localhost
    port: 5046
    enabled: true
  otlp:
    host: localhost
    logs-port: 4317
    metrics-port: 4318
    traces-port: 4319
  kafka:
    brokers: localhost:29092
    mail-broadcast-topic: mail_service_mail_broadcast
    create-mail-command-topic: mail_service_create_mail_command
    retry-topic: mail_service_retry
    dlq-topic: mail_service_dlq
  cache:
    host: localhost
    port: 6379
    password: 123
    default-ttl: PT5M
  auth:
    user: user
    password: password
    exclusions:
      - /webjars/**
      - /actuator/**
      - /v3/api-docs/**
    roles:
      - USER
  rsocket:
    port: 7001
    ssl:
      enabled: false
    uri: 'http://localhost:7001/rsocket' # only for self-requesting, remove if use service as template
  http:
    port: 8080
    client:
      connection-timeout-millis: 5000
    logging:
      exclusions:
        - /webjars.*
        - /actuator.*
        - /v3/api-docs.*
  mail:
    destination-email: test@yandex.ru
    host: localhost
    port: 2500
    username: test@yandex.ru
    password: 1111
    protocol: smtp
    ssl-enabled: false
    tls-enabled: false
    tls-required: false
    auth-enabled: false
    debug-enabled: true
    template: full_template.html
  scheduling:
    enabled: true
    thread-pool-size: 5 # increase if new scheds are coming to not make race conditions
    min-lock: 0
    max-lock: 1h
    email-sending:
      enabled: true
      delay: PT10S
      batch-size: 20
      lock-max-duration: PT1H
      days-to-check-for-unsent-emails: 1
    load:
      enabled: true
      delay: PT10S
      batch-size: 20
      lock-max-duration: PT1H
  database:
    host: localhost
    schema: mail_service
    port: 5432
    name: mail_service
    user: mail_service
    password: mail_service

management:
  otlp:
    metrics:
      export:
        url: 'http://${contour.otlp.host}:${contour.otlp.metrics-port}/opentelemetry.proto.collector.metrics.v1.MetricsService/Export'
    tracing:
      endpoint: 'http://${contour.otlp.host}:${contour.otlp.traces-port}/opentelemetry.proto.collector.trace.v1.TraceService/Export'
  health:
    readinessState:
      enabled: true
    livenessState:
      enabled: true
    r2dbc:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      group:
        readiness:
          include: r2dbc, kafkaConsumersHealth, kafkaClusterHealth
      show-details: always
      show-components: always
      probes:
        enabled: true
        add-additional-paths: true
  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
    health:
      show-details: always
  tracing:
    sampling:
      probability: 1.0

server:
  port: '${contour.http.port}'

messages:
  encoding: 'UTF-8'
  basename: 'classpath:messages/messages'

spring:
  rsocket:
    server:
      port: '${contour.rsocket.port}'
      transport: websocket
      mapping-path: /rsocket
      ssl:
        enabled: '${contour.rsocket.ssl.enabled}'
  mail:
    host: '${contour.mail.host}'
    port: '${contour.mail.port}'
    username: '${contour.mail.username}'
    password: '${contour.mail.password}'
    properties:
      mail:
        transport:
          protocol: '${contour.mail.protocol}'
        smtp:
          auth: '${contour.mail.auth-enabled}'
          ssl:
            enable: '${contour.mail.ssl-enabled}'
          starttls:
            enable: '${contour.mail.tls-enabled}'
            required: '${contour.mail.tls-required}'
  main:
    banner-mode: off
  r2dbc:
    url: 'r2dbc:postgresql://${contour.database.host}:${contour.database.port}/${contour.database.name}?currentSchema=${contour.database.schema}'
    username: '${contour.database.user}'
    password: '${contour.database.password}'
    pool:
      initial-size: 4
      max-size: 8
  flyway:
    enabled: 'true'
    url: 'jdbc:postgresql://${contour.database.host}:${contour.database.port}/${contour.database.name}?currentSchema=${contour.database.schema}'
    user: '${contour.database.user}'
    password: '${contour.database.password}'
  application:
    name: 'mail-service'

logging:
  level:
    root: INFO

kafka:
  consuming-enabled: true
  retry-consuming-enabled: true
  create-mail-command-consuming-enabled: true

  create-mail-command-topic: '${contour.kafka.create-mail-command-topic}'
  mail-broadcast-topic: '${contour.kafka.mail-broadcast-topic}'
  retry-topic: '${contour.kafka.retry-topic}'
  dlq-topic: '${contour.kafka.dlq-topic}'
  health-timeout-millis: 50
  health-warmup-timeout-millis: 2000

  sender:
    max-in-flight: 64

  receivers-retry-settings:
    attempts: 10
    period-seconds: 2
    jitter: 0.75

  offset-reset-config: 'latest'
  brokers: '${contour.kafka.brokers}'
  group-id: 'mail-service'
  max-poll-records: 50
  commit-interval: 3 # in seconds

  retry-handling-interval: 10 # in seconds
  retry-resend-number: 5
