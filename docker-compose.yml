services:
  # Service
  service:
    # Uncomment to use prebuilt srcs instead of image
    build:
      context: .
    # image: decentboat/mail-service:latest
    container_name: service
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider localhost:8080/actuator/health/liveness || exit 1"
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 20s
    depends_on:
      - db
      - dataprepper
      - collector
      - kafka
      - keydb
      - mailslurper
      - mock-server
    environment:
      contour.cache.host: keydb
      spring.application.name: mail-service-two
      contour.cache.port: 6379

      contour.mail.host: mailslurper
      contour.mail.username: user@mail.ru
      contour.mail.password: password
      contour.mail.ssl-enabled: false
      contour.mail.tls-enabled: false
      contour.mail.tls-required: false
      contour.mail.auth-enabled: false
      contour.mail.port: 2500

      contour.kafka.brokers: kafka:9092

      contour.otlp.host: collector

      contour.database.host: db
      contour.database.port: 5432
      contour.database.name: mail_service
      contour.database.schema: mail_service
      contour.database.password: mail_service
      contour.database.user: mail_service
    ports:
      - "8080:8080"
      - "9091:9091"
      - "9010:9010"
      - "7001:7001"
  # Storage
  db:
    image: postgres:16.3
    container_name: db
    restart: always
    ports:
      - "7000:5432"
    environment:
      POSTGRES_PASSWORD: mail_service
      POSTGRES_USER: mail_service
      POSTGRES_DB: mail_service
    command: postgres -c shared_preload_libraries='pg_stat_statements'
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./config/db/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
  pgadmin:
    image: dpage/pgadmin4:2024-07-23-1
    depends_on:
      - db
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_SERVER_JSON_FILE: /pgadmin4/config/servers.json
    volumes:
      - ./config/db/pgadmin:/pgadmin4/config
      - pgadmin:/var/lib/pgadmin
    ports:
      - "4002:80"
  keydb:
    container_name: keydb
    image: eqalpha/keydb:alpine_x86_64_v6.3.4
    restart: always
    entrypoint: keydb-server --appendonly yes --requirepass 123 --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - keydb_data:/data
  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: 0.0.0.0
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=*"
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-txn-logs:/var/lib/zookeeper/log
      - zk-secrets:/etc/zookeeper/secrets
  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.2
    ports:
      - "6005:6005"
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: localhost
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:6005
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
    volumes:
      - schema-registry-secrets:/etc/schema-registry/secrets
  kafka:
    image: confluentinc/cp-kafka:7.6.2
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: LOCAL://kafka:29092,DOCKER://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: LOCAL://localhost:29092, DOCKER://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LOCAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: 0.0.0.0
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote.rmi.port=9101 -Djava.rmi.server.hostname=0.0.0.0 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false"
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-secrets:/etc/kafka/secrets
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - "9001:8080"
    depends_on:
      - zookeeper
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: localhost:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: localhost:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
  # Observability
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/observability/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus_data:/var/lib/prometheus
  collector:
    image: otel/opentelemetry-collector-contrib:0.105.0
    volumes:
      - ./config/observability/otelcollector/config.yaml:/etc/config.yaml
    command: [ "--config=/etc/config.yaml" ]
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "4319:4319" # OTLP http receiver
  dataprepper:
    image: opensearchproject/data-prepper:2.8.0
    container_name: dataprepper
    volumes:
      - ./config/observability/dataprepper:/usr/share/data-prepper/pipelines
  opensearch:
    image: opensearchproject/opensearch:2.15.0
    environment:
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: "Aa1@~sfhkjswfyj!"
      discovery.type: "single-node"
      DISABLE_SECURITY_PLUGIN: true
      OPENSEARCH_JAVA_OPTS: "-Dopensearch.experimental.feature.telemetry.enabled=true"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.15.0
    depends_on:
      - opensearch
    ports:
      - "5601:5601"
    environment:
      # must be a string with no spaces when specified as an environment variable
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: true
    volumes:
      - ./config/observability/dashboard/opensearch_dashboards.yml:/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml
  # Analytics
  clickhouse:
    image: clickhouse/clickhouse-server:24.5.3.5-alpine
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: mail_service
      CLICKHOUSE_USER: mail_service
      CLICKHOUSE_PASSWORD: mail_service
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - ch-data:/var/lib/clickhouse/
      # - ./config/analytics/clickhouse/users.xml:/etc/clickhouse-server/users.d/users.xml
      # - ./config/analytics/clickhouse/config.xml:/etc/clickhouse-server/config.d/config.xml
      - ./config/analytics/clickhouse/init:/docker-entrypoint-initdb.d/
  pg-compeng:
    container_name: datalens-pg-compeng
    image: postgres:16-alpine
    environment:
      POSTGRES_PASSWORD: "pg-compeng"
      POSTGRES_DB: pg-compeng
      POSTGRES_USER: pg-compeng
  pg-us:
    container_name: datalens-pg-us
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: us-db-ci_purgeable
      POSTGRES_USER: us
      POSTGRES_PASSWORD: us
  us:
    container_name: datalens-us
    image: ghcr.io/datalens-tech/datalens-us:0.209.0
    depends_on:
      - pg-us
    environment:
      APP_INSTALLATION: "opensource"
      APP_ENV: "prod"
      MASTER_TOKEN: "fake-us-master-token"
      POSTGRES_DSN_LIST: ${METADATA_POSTGRES_DSN_LIST:-postgres://us:us@pg-us:5432/us-db-ci_purgeable}
      SKIP_INSTALL_DB_EXTENSIONS: ${METADATA_SKIP_INSTALL_DB_EXTENSIONS:-0}
      USE_DEMO_DATA: ${USE_DEMO_DATA:-1}
      HC: ${HC:-0}
  control-api:
    container_name: datalens-control-api
    image: ghcr.io/datalens-tech/datalens-control-api:0.2091.0
    environment:
      BI_API_UWSGI_WORKERS_COUNT: 4
      CONNECTOR_AVAILABILITY_VISIBLE: "clickhouse"
      RQE_FORCE_OFF: 1
      DL_CRY_ACTUAL_KEY_ID: key_1
      DL_CRY_KEY_VAL_ID_key_1: "h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk="
      RQE_SECRET_KEY: ""
      US_HOST: "http://us:8083"
      US_MASTER_TOKEN: "fake-us-master-token"
      CONFIG_PATH: "/etc/backend-configs/api.yaml"
    depends_on:
      - us
    volumes:
      - ./config/analytics/datalens/backend-configs:/etc/backend-configs
  data-api:
    container_name: datalens-data-api
    image: ghcr.io/datalens-tech/datalens-data-api:0.2091.0
    environment:
      GUNICORN_WORKERS_COUNT: 5
      RQE_FORCE_OFF: 1
      CACHES_ON: 0
      MUTATIONS_CACHES_ON: 0
      RQE_SECRET_KEY: ""
      DL_CRY_ACTUAL_KEY_ID: key_1
      DL_CRY_KEY_VAL_ID_key_1: "h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk="
      BI_COMPENG_PG_ON: 1
      BI_COMPENG_PG_URL: "postgresql://pg-compeng:pg-compeng@pg-compeng:5432/postgres"
      US_HOST: "http://us:8083"
      US_MASTER_TOKEN: "fake-us-master-token"
      CONFIG_PATH: "/etc/backend-configs/api.yaml"
    depends_on:
      - us
      - pg-compeng
    volumes:
      - ./config/analytics/datalens/backend-configs:/etc/backend-configs
  datalens:
    container_name: datalens-ui
    image: ghcr.io/datalens-tech/datalens-ui:0.1741.0
    ports:
      - "8855:8080"
    depends_on:
      - us
      - control-api
      - data-api
    environment:
      APP_MODE: "full"
      APP_ENV: "production"
      APP_INSTALLATION: "opensource"
      AUTH_POLICY: "disabled"
      US_ENDPOINT: "http://us:8083"
      BI_API_ENDPOINT: "http://control-api:8080"
      BI_DATA_ENDPOINT: "http://data-api:8080"
      NODE_EXTRA_CA_CERTS: "/usr/local/share/ca-certificates/cert.pem"
      HC: ${HC:-0}
  # Side
  mock-server:
    image: mockserver/mockserver:5.15.0
    ports:
      - "5001:1080"
    environment:
      MOCKSERVER_LOG_LEVEL: TRACE
      MOCKSERVER_PROPERTY_FILE: /config/mockserver.properties
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/init.json
    volumes:
      - ./config/side/mockserver:/config
  mailslurper:
    container_name: mailslurper
    image: marcopas/docker-mailslurper:latest # have to use latest, there are no other option
    restart: always
    ports:
      - "2500:2500"
      - "8085:8085"
      - "8083:8080"

volumes:
  pg_data: { }
  zk-data: { }
  zk-txn-logs: { }
  zk-secrets: { }
  pgadmin: { }
  sonarqube_data: { }
  sonarqube_extensions: { }
  sonarqube_logs:
  kafka-data: { }
  kafka-secrets: { }

  schema-registry-secrets: { }

  opensearch_data: { }
  prometheus_data: { }

  keydb_data: { }
  ch-data: { }
