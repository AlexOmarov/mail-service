version: '3.9'

services:
  # Our service
  service:
    # Uncomment to use prebuilt srcs instead of image
    build:
     context: .
    # image: decentboat/mail-service:latest
    container_name: service
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/liveness | grep UP || exit 1"
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 20s
    depends_on:
      - db
      - dataprepper
      - kafka
      - redis
      - mailslurper
      - mock-server
    environment:
      contour.cache.host: redis
      contour.cache.port: 6379

      contour.mail.host: mailslurper
      contour.mail.username: user@mail.ru
      contour.mail.password: password
      contour.mail.ssl-enabled: false
      contour.mail.tls-enabled: false
      contour.mail.tls-required: false
      contour.mail.auth-enabled: false
      contour.mail.port: 2500

      contour.kafka.brokers: kafka:9092

      contour.otlp.host: dataprepper

      contour.database.host: db
      contour.database.port: 5432
      contour.database.name: mail_service
      contour.database.schema: mail_service
      contour.database.password: mail_service
      contour.database.user: mail_service
    ports:
      - "8080:8080"
      - "9091:9091"
      - "9010:9010"
      - "7001:7001"
  # Containers related to databases
  db:
    image: postgres:16.3
    container_name: db
    restart: always
    ports:
      - "7000:5432"
    environment:
      POSTGRES_PASSWORD: mail_service
      POSTGRES_USER: mail_service
      POSTGRES_DB: mail_service
    volumes:
      - pg_data:/var/lib/postgresql/data
  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - db
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_SERVER_JSON_FILE: /pgadmin4/config/servers.json
    volumes:
      - ./config/db/pgadmin:/pgadmin4/config
      - pgadmin:/var/lib/pgadmin
    ports:
      - "4002:80"
  redis:
    container_name: redis
    image: eqalpha/keydb:latest
    restart: always
    entrypoint: keydb-server --appendonly yes --requirepass 123 --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
  # Containers related to kafka
  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
    ports:
      - "2181:2181"
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-txn-logs:/var/lib/zookeeper/log
      - zk-secrets:/etc/zookeeper/secrets
  schema-registry:
    image: confluentinc/cp-schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: localhost
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:6005
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
    ports:
      - "6005:6005"
    volumes:
      - schema-registry-secrets:/etc/schema-registry/secrets
  kafka:
    image: confluentinc/cp-enterprise-kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: LOCAL://kafka:29092,DOCKER://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: LOCAL://localhost:29092, DOCKER://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LOCAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-secrets:/etc/kafka/secrets
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui
    ports:
      - "9001:8080"
    depends_on:
      - zookeeper
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
      # KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: rc1a-m9sg794q6emckrlf.mdb.yandexcloud.net:9091
      # KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: SASL_SSL
      # KAFKA_CLUSTERS_0_SSL_TRUSTSTORELOCATION: /tmp/ssl.jks
      # KAFKA_CLUSTERS_0_SSL_TRUSTSTOREPASSWORD: "kafkacert"
      # KAFKA_CLUSTERS_0_PROPERTIES_SASL_JAAS_CONFIG: "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"denumhub-test2\" password=\"/cH01c8K&oD67m$`GrPJ\";"
      # KAFKA_CLUSTERS_0_PROPERTIES_SASL_MECHANISM: "SCRAM-SHA-512"
      # KAFKA_CLUSTERS_0_PROPERTIES_PROTOCOL: SASL
      # KAFKA_CLUSTERS_0_PROPERTIES_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ''
    # volumes:
    #   - "F:/work/projects/orbsoft/message-queue-service/message-queue-service-app/src/main/resources/keys:/tmp"
  # Containers related to Opensearch stack for logs -
  dataprepper:
    image: opensearchproject/data-prepper:2.8.0
    container_name: dataprepper
    volumes:
      - ./config/dataprepper:/usr/share/data-prepper/pipelines
    ports:
      - "4317:4317" # otel_logs_source
      - "4318:4318" # otel_metrics_source
      - "4319:4319" # otel_trace_source
  opensearch:
    image: opensearchproject/opensearch:2.14.0
    environment:
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: "Aa1@~sfhkjswfyj!"
      discovery.type: "single-node"
      DISABLE_SECURITY_PLUGIN: true

      OPENSEARCH_JAVA_OPTS="-Dopensearch:experimental:feature:telemetry:enabled=true":
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.14.0
    depends_on:
      - opensearch
    ports:
      - "5601:5601"
    environment:
      # must be a string with no spaces when specified as an environment variable
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: true
  # Containers with emulated side systems
  mock-server:
    image: mockserver/mockserver
    ports:
      - "5001:1080"
    environment:
      MOCKSERVER_LOG_LEVEL: TRACE
      MOCKSERVER_PROPERTY_FILE: /config/mockserver.properties
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/init.json
    volumes:
      - ./config/sidesystems/mockserver:/config
  mailslurper:
    container_name: mailslurper
    image: marcopas/docker-mailslurper:latest
    restart: always
    ports:
      - "2500:2500"
      - "8085:8085"
      - "8083:8080"


volumes:
  pg_data: { }
  zk-data: { }
  zk-txn-logs: { }
  zk-secrets: { }
  pgadmin: { }
  sonarqube_data: { }
  sonarqube_extensions: { }
  sonarqube_logs:
  kafka-data: { }
  kafka-secrets: { }

  schema-registry-secrets: { }

  opensearch_data: { }

  redis_data: { }