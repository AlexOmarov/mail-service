global:
  replicaCount: 1

  image:
    pullPolicy: IfNotPresent

  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: { }
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }
  # fsGroup: 2000

  securityContext: { }
    # capabilities:
    #   drop:
    #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  # resources:
  #   requests:
  #     memory: 256Mi
  #     cpu: 20m
  #   limits:
  #     memory: 1024Mi
  #     cpu: 300m

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }

  serviceDiscoveryRoleBinding: true
  env:
    TEST_ENV: "TEST"

kafka-ui:
  enabled: true
  service:
    selector:
      app: postgres
    port: 8080
    targetPort: 8080
  image:
    repository: "provectuslabs/kafka-ui"
    tag: "v0.7.2"
  ports:
    - name: http
      containerPort: 8080
      protocol: TCP
  resources:
    requests:
      memory: 256Mi
      cpu: 20m
    limits:
      memory: 384Mi
      cpu: 300m
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      port: 8080
      path: /
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      port: 8080
      path: /
    timeoutSeconds: 5
  env:
    KAFKA_CLUSTERS_0_NAME: berte-cluster
    KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "persistence-kafka.persistence.svc.cluster.local:29092"
    KAFKA_CLUSTERS_0_ZOOKEEPER: "persistence-zookeeper.persistence.svc.cluster.local:2181"
    KAFKA_CLUSTERS_0_JMXPORT: 9997

pgadmin:
  enabled: true
  service:
    port: 5432
    targetPort: 5432
  image:
    repository: "dpage/pgadmin4"
    tag: "2024-07-23-1"
  ports:
    - name: http
      containerPort: 80
      protocol: TCP
  resources:
    requests:
      memory: 256Mi
      cpu: 20m
    limits:
      memory: 384Mi
      cpu: 300m
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      port: 80
      path: /
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      port: 80
      path: /
    timeoutSeconds: 5
  env:
    PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
    PGADMIN_DEFAULT_PASSWORD: admin
    PGADMIN_CONFIG_SERVER_MODE: 'False'
    # PGADMIN_SERVER_JSON_FILE: /pgadmin4/config/servers.json

opensearch-dashboard:
  enabled: true
  image:
    repository: "opensearchproject/opensearch-dashboards"
    tag: "2.15.0"
  pv:
    enabled: true
    accessModes:
      - ReadWriteMany
    hostPath: "/run/desktop/mnt/host/g/work/projects/personal/mail-service/config/observability/dashboard"
  pvc:
    enabled: true
    accessMode: ReadWriteMany

  volumeMounts:
    - name: config-volume
      mountPath: /usr/share/opensearch-dashboards/config

  volumes:
    - name: config-volume
      persistentVolumeClaim:
        claimName: ui-opensearch-dashboard-pvc

  service:
    port: 5601
    targetPort: 5601
  ports:
    - name: http
      containerPort: 5601
      protocol: TCP
  resources:
    requests:
      memory: 256Mi
      cpu: 20m
    limits:
      memory: 2048Mi
      cpu: 300m
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      port: 5601
      path: /
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      port: 5601
      path: /
    timeoutSeconds: 5
  env:
    OPENSEARCH_HOSTS: '["http://persistence-opensearch.persistence:9200"]'
    DISABLE_SECURITY_DASHBOARDS_PLUGIN: true

control-api:
  enabled: true
  service:
    port: 8080
    targetPort: 8080
  pv:
    enabled: true
    accessModes:
      - ReadWriteMany
    hostPath: "/run/desktop/mnt/host/g/work/projects/personal/mail-service/config/analytics/datalens/backend-configs"
  pvc:
    enabled: true
    accessMode: ReadWriteMany

  volumeMounts:
    - name: config-volume
      mountPath: /etc/backend-configs

  volumes:
    - name: config-volume
      persistentVolumeClaim:
        claimName: ui-control-api-pvc

  image:
    repository: "ghcr.io/datalens-tech/datalens-control-api"
    tag: "0.2091.0"
  ports:
    - name: http
      containerPort: 8080
      protocol: TCP
  resources:
    requests:
      memory: 256Mi
      cpu: 20m
    limits:
      memory: 1024Mi
      cpu: 300m
  env:
    BI_API_UWSGI_WORKERS_COUNT: 4
    CONNECTOR_AVAILABILITY_VISIBLE: "clickhouse"
    RQE_FORCE_OFF: 1
    DL_CRY_ACTUAL_KEY_ID: key_1
    DL_CRY_KEY_VAL_ID_key_1: "h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk="
    RQE_SECRET_KEY: ""
    US_HOST: "http://ui-us.ui:8080"
    US_MASTER_TOKEN: "fake-us-master-token"
    CONFIG_PATH: "/etc/backend-configs/api.yaml"
data-api:
  enabled: true
  pv:
    enabled: true
    accessModes:
      - ReadWriteMany
    hostPath: "/run/desktop/mnt/host/g/work/projects/personal/mail-service/config/analytics/datalens/backend-configs"
  pvc:
    enabled: true
    accessMode: ReadWriteMany

  volumeMounts:
    - name: config-volume
      mountPath: /etc/backend-configs

  volumes:
    - name: config-volume
      persistentVolumeClaim:
        claimName: ui-data-api-pvc
  service:
    port: 8080
    targetPort: 8080
  image:
    repository: "ghcr.io/datalens-tech/datalens-data-api"
    tag: "0.2091.0"
  ports:
    - name: http
      containerPort: 8080
      protocol: TCP
  resources:
    requests:
      memory: 256Mi
      cpu: 20m
    limits:
      memory: 1024Mi
      cpu: 300m
  env:
    GUNICORN_WORKERS_COUNT: 5
    RQE_FORCE_OFF: 1
    CACHES_ON: 0
    MUTATIONS_CACHES_ON: 0
    RQE_SECRET_KEY: ""
    DL_CRY_ACTUAL_KEY_ID: key_1
    DL_CRY_KEY_VAL_ID_key_1: "h1ZpilcYLYRdWp7Nk8X1M1kBPiUi8rdjz9oBfHyUKIk="
    BI_COMPENG_PG_ON: 1
    BI_COMPENG_PG_URL: "postgresql://persistence-pgcompeng.persistence:pg-compeng@pg-compeng:5432/postgres"
    US_HOST: "http://ui-us.ui:8080"
    US_MASTER_TOKEN: "fake-us-master-token"
    CONFIG_PATH: "/etc/backend-configs/api.yaml"
datalens:
  enabled: true
  service:
    port: 8080
    targetPort: 8080
  image:
    repository: "ghcr.io/datalens-tech/datalens-ui"
    tag: "0.1741.0"
  ports:
    - name: http
      containerPort: 8080
      protocol: TCP
  resources:
    requests:
      memory: 256Mi
      cpu: 20m
    limits:
      memory: 384Mi
      cpu: 300m
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      port: 8080
      path: /
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      port: 8080
      path: /
    timeoutSeconds: 5
  env:
    APP_MODE: "full"
    APP_ENV: "production"
    APP_INSTALLATION: "opensource"
    AUTH_POLICY: "disabled"
    US_ENDPOINT: "http://ui-us.ui:8083"
    BI_API_ENDPOINT: "http://ui-control-api.ui:8080"
    BI_DATA_ENDPOINT: "http://ui-data-api.ui:8080"
    NODE_EXTRA_CA_CERTS: "/usr/local/share/ca-certificates/cert.pem"
    HC: ${HC:-0}
us:
  enabled: true
  service:
    port: 8083
    targetPort: 8083
  image:
    repository: "ghcr.io/datalens-tech/datalens-us"
    tag: "0.209.0"
  ports:
    - name: http
      containerPort: 8083
      protocol: TCP
  resources:
    requests:
      memory: 256Mi
      cpu: 20m
    limits:
      memory: 1024Mi
      cpu: 300m
  env:
    APP_INSTALLATION: "opensource"
    APP_ENV: "prod"
    MASTER_TOKEN: "fake-us-master-token"
    POSTGRES_DSN_LIST: postgres://persistence-pgus.persistence:us@us:5432/us-db-ci_purgeable
    SKIP_INSTALL_DB_EXTENSIONS: ${METADATA_SKIP_INSTALL_DB_EXTENSIONS:-0}
    USE_DEMO_DATA: ${USE_DEMO_DATA:-1}
    HC: ${HC:-0}
