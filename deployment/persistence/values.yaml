global:
  replicaCount: 1

  image:
    pullPolicy: IfNotPresent

  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: { }
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }
  # fsGroup: 2000

  securityContext: { }
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  resources:
    requests:
      memory: 256Mi
      cpu: 20m
    limits:
      memory: 1024Mi
      cpu: 300m

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 2
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }

  serviceDiscoveryRoleBinding: true
  env:
    TEST_ENV: "TEST"

postgres:
  enabled: true
  service:
    selector:
      app: postgres
    port: 5432
    targetPort: 5432
  image:
    repository: "postgres"
    tag: "16.3"
  ports:
    - name: tcp
      containerPort: 5432
      protocol: TCP
  resources:
    requests:
      memory: 256Mi
      cpu: 20m
    limits:
      memory: 384Mi
      cpu: 300m
  livenessProbe:
    exec:
      command:
        - pg_isready
        - -U
        - test
        - -d
        - test
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
  readinessProbe:
    exec:
      command:
        - pg_isready
        - -U
        - test
        - -d
        - test
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  env:
      POSTGRES_DB: test
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test

clickhouse:
  enabled: true
  service:
    selector:
      app: clickhouse
    port: 8123
    targetPort: 8123
  image:
    repository: "clickhouse/clickhouse-server"
    tag: "24.5.3.5-alpine"
  ports:
    - name: tcp
      containerPort: 8123
      protocol: TCP
    - name: tcpnine
      containerPort: 9000
      protocol: TCP
  resources:
    requests:
      memory: 256Mi
      cpu: 20m
    limits:
      memory: 384Mi
      cpu: 300m
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      port: 8123
      path: /ping
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      port: 8123
      path: /ping
    timeoutSeconds: 5
  env:
    CLICKHOUSE_DB: test
    CLICKHOUSE_USER: test
    CLICKHOUSE_PASSWORD: test
    CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT : 1

opensearch:
  enabled: true
  service:
    selector:
      app: opensearch
    port: 8123
    targetPort: 8123
  image:
    repository: "opensearchproject/opensearch"
    tag: "2.15.0"
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      port: 9200
      path: /
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      port: 9200
      path: /
    timeoutSeconds: 5
  ports:
    - name: tcp
      containerPort: 9200
      protocol: TCP
  resources:
    requests:
      memory: 512Mi
      cpu: 200m
    limits:
      memory: 4096Mi
      cpu: 300m
  env:
    OPENSEARCH_INITIAL_ADMIN_PASSWORD: "Aa1@~sfhkjswfyj!"
    discovery.type: "single-node"
    DISABLE_SECURITY_PLUGIN: true
    OPENSEARCH_JAVA_OPTS: "-Dopensearch.experimental.feature.telemetry.enabled=true"

keydb:
  enabled: true
  service:
    selector:
      app: keydb
    port: 6379
    targetPort: 6379
  image:
    repository: "eqalpha/keydb"
    tag: "latest"
  ports:
    - name: tcp
      containerPort: 6379
      protocol: TCP
  command: [ "keydb-server" ]
  args:
    - "--appendonly"
    - "yes"
    - "--requirepass"
    - "$(REDIS_PASSWORD)"
    - "--maxmemory"
    - "512mb"
    - "--maxmemory-policy"
    - "allkeys-lru"
  resources:
    requests:
      memory: 256Mi
      cpu: 20m
    limits:
      memory: 384Mi
      cpu: 300m
  livenessProbe:
    initialDelaySeconds: 3
    periodSeconds: 3
    tcpSocket:
      port: 6379
  readinessProbe:
    initialDelaySeconds: 3
    periodSeconds: 3
    tcpSocket:
      port: 6379
  env:
    REDIS_PASSWORD: 123

zookeeper:
  image:
    repository: "confluentinc/cp-zookeeper"
    tag: "latest"
  livenessProbe:
    initialDelaySeconds: 3
    periodSeconds: 3
    tcpSocket:
      port: 2181
  readinessProbe:
    initialDelaySeconds: 3
    periodSeconds: 3
    tcpSocket:
      port: 2181
  service:
    selector:
      app: zookeeper
    port: 2181
    targetPort: 2181
  ports:
    - name: tcp
      containerPort: 9101
      protocol: TCP
  resources:
    requests:
      memory: 256Mi
      cpu: 20m
    limits:
      memory: 384Mi
      cpu: 300m
  env:
    ZOOKEEPER_CLIENT_PORT: 2181
    ZOOKEEPER_TICK_TIME: 2000
    ZOOKEEPER_SERVER_ID: 1
    KAFKA_JMX_PORT: 9101
    KAFKA_JMX_HOSTNAME: 0.0.0.0
    KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=*"

kafka:
  image:
    repository: "confluentinc/cp-enterprise-kafka"
    tag: "latest"
  service:
    selector:
      app: kafka
    port: 9092
    targetPort: 9092
  ports:
    - name: jmx
      containerPort: 9101
      protocol: TCP
    - name: kafka
      containerPort: 29092
      protocol: TCP
  resources:
    requests:
      memory: 512Mi
      cpu: 200m
    limits:
      memory: 1024Mi
      cpu: 300m
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    tcpSocket:
      port: 9092
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    tcpSocket:
      port: 9092
    timeoutSeconds: 5
  env:
    KAFKA_BROKER_ID: 1
    KAFKA_ZOOKEEPER_CONNECT: persistence-zookeeper:2181
    KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092,EXTERNAL://persistence-kafka:9092
    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
    KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    KAFKA_JMX_PORT: 9101
    KAFKA_JMX_HOSTNAME: 0.0.0.0
    KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote.rmi.port=9101 -Djava.rmi.server.hostname=0.0.0.0 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false"

schema-registry:
  image:
    repository: "confluentinc/cp-schema-registry"
    tag: "latest"
  service:
    selector:
      app: schema-registry
    port: 6005
    targetPort: 6005
  ports:
    - name: jmx
      containerPort: 9101
      protocol: TCP
    - name: kafka
      containerPort: 6005
      protocol: TCP
  resources:
    requests:
      memory: 512Mi
      cpu: 200m
    limits:
      memory: 1024Mi
      cpu: 300m
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      path: /
      port: 6005
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    httpGet:
      path: /
      port: 6005
    timeoutSeconds: 5
  env:
    SCHEMA_REGISTRY_HOST_NAME: localhost
    SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:6005
    SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'persistence-kafka:9092'