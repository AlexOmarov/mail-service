receivers:
  # TODO: add jmx for all systems
  # TODO: metrics/traces are now grpc, should use other meter registry and other tracing exporter
  otlp/logs:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317

  otlp/metrics:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4318

  otlp/traces:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4319

  zookeeper:
    endpoint: "persistence-zookeeper.persistence:2181"
    collection_interval: 5s

  kafkametrics:
    brokers: persistence-kafka.persistence:29092
    protocol_version: 3.7.0
    scrapers:
      - brokers
      - topics
      - consumers
    collection_interval: 5s

  redis:
    endpoint: "persistence-keydb.persistence:6379"
    password: "123"
    collection_interval: 5s

  postgresql:
    endpoint: persistence-postgres.persistence:5432
    transport: tcp
    username: test
    password: test
    databases:
      - test
    collection_interval: 5s
    tls:
      insecure: true
    connection_pool:
      max_idle_time: 10m
      max_lifetime: 0
      max_idle: 2
      max_open: 5

  sqlquery/pgstatstatements:
    driver: postgres
    datasource: "host=persistence-postgres.persistence port=5432 user=test password=test sslmode=disable dbname=test"
    collection_interval: 5s
    queries:
      - sql: "SELECT queryid, total_exec_time, mean_exec_time, userid, dbid FROM pg_stat_statements"
        metrics:
          - metric_name: pg_stat_statements_total_exec_time
            value_column: total_exec_time
            attribute_columns: [queryid, userid, dbid]
            value_type: double
            data_type: sum
          - metric_name: pg_stat_statements_mean_exec_time
            value_column: mean_exec_time
            attribute_columns: [queryid, userid, dbid]
            value_type: double
            data_type: gauge

processors:
  attributes/example:
    actions:
      - key: serviceName
        value: SERVICE_NAME_FROM_PROCESSOR_ATTR_OTEL_COLLECTOR
        action: upsert

exporters:
  prometheus:
    endpoint: "0.0.0.0:8008"
    resource_to_telemetry_conversion:
      enabled: true # Convert resource attributes to metric labels
  otlp/logs:
    endpoint: monitoring-dataprepper.monitoring:4317
    tls:
      insecure: true
  otlp/metrics:
    endpoint: monitoring-dataprepper.monitoring:4318
    tls:
      insecure: true
  otlp/traces:
    endpoint: monitoring-dataprepper.monitoring:4319
    tls:
      insecure: true
extensions:
  health_check:
    endpoint: "0.0.0.0:13133"
    check_collector_pipeline:
      enabled: true
      interval: "5m"
      exporter_failure_threshold: 5
    path: "/health"

service:
  pipelines:
    metrics:
      receivers: [otlp/metrics, sqlquery/pgstatstatements, zookeeper, kafkametrics, redis, postgresql]
      processors: [attributes/example]
      exporters: [otlp/metrics, prometheus]
    logs:
      receivers: [ otlp/logs ]
      exporters: [ otlp/logs ]
    traces:
      receivers: [ otlp/traces ]
      exporters: [ otlp/traces ]